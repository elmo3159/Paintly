'use client'

import { useState, useEffect } from 'react'
import { createClient } from '@/lib/supabase/client'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { ScrollArea } from '@/components/ui/scroll-area'
import { Badge } from '@/components/ui/badge'
import { Loader2, Download, Eye, Calendar, Palette } from 'lucide-react'
import Image from 'next/image'
import { ImageComparisonFixed } from '@/components/image-comparison-fixed'

interface GenerationHistoryItem {
  id: string
  created_at: string
  completed_at: string | null
  status: 'processing' | 'completed' | 'failed'
  wall_color: string | null
  roof_color: string | null
  door_color: string | null
  weather: string | null
  generated_image_url: string | null
  original_image_url: string | null
  gemini_response: { imageUrl?: string; hasImage?: boolean; originalImageUrl?: string } | null
  error_message: string | null
  prompt: string | null
}

interface GenerationHistoryProps {
  customerId: string
  refresh?: number
  autoOpenDetailId?: string | null
}

export function GenerationHistory({ customerId, refresh, autoOpenDetailId }: GenerationHistoryProps) {
  const [history, setHistory] = useState<GenerationHistoryItem[]>([])
  const [loading, setLoading] = useState(true)
  const [selectedItem, setSelectedItem] = useState<GenerationHistoryItem | null>(null)
  const supabase = createClient()

  useEffect(() => {
    fetchHistory()
  }, [customerId, refresh])

  // Auto-open detail view for latest generation
  useEffect(() => {
    if (autoOpenDetailId && history.length > 0) {
      const targetItem = history.find(item => item.id === autoOpenDetailId)
      if (targetItem) {
        console.log('🎯 Auto-opening detail view for generation:', autoOpenDetailId)
        setSelectedItem(targetItem)
      }
    }
  }, [autoOpenDetailId, history])

  const fetchHistory = async () => {
    setLoading(true)
    console.log('🔍 Fetching history for customer ID:', customerId)

    // Check current authenticated user with detailed debugging
    const { data: { user }, error: authError } = await supabase.auth.getUser()
    console.log('👤 Current authenticated user:', { 
      user: user?.id, 
      authError,
      userEmail: user?.email,
      userExists: !!user 
    })

    if (!user) {
      console.error('❌ No authenticated user found - RLS will block data access')
      setHistory([])
      setLoading(false)
      return
    }

    // Try the query with explicit debugging
    console.log('🔄 Attempting Supabase query with authenticated user:', user.id)
    const { data, error } = await supabase
      .from('generations')
      .select(`
        *,
        prompt,
        created_at,
        status,
        original_image_url,
        generated_image_url,
        wall_color,
        roof_color,
        door_color,
        weather,
        other_instructions
      `)
      .eq('customer_page_id', customerId)
      .order('created_at', { ascending: false })

    console.log('📊 Supabase query result:', { 
      data, 
      error, 
      count: data?.length,
      queryParams: {
        table: 'generations',
        customer_page_id: customerId,
        user_id: user.id,
        authMethod: 'client-side-anon-key'
      }
    })

    // 🔥 NEW: Log detailed prompt data from each item
    if (data && data.length > 0) {
      console.log('🎯 DETAILED PROMPT DATA ANALYSIS:')
      data.forEach((item, index) => {
        console.log(`--- Item ${index + 1} (ID: ${item.id}) ---`)
        console.log('  hasPrompt:', !!item.prompt)
        console.log('  promptLength:', item.prompt?.length || 0)
        console.log('  promptPreview:', item.prompt?.substring(0, 50) + '...' || 'NO PROMPT')
        console.log('  allKeys:', Object.keys(item))
        console.log('  fullItem:', item)
      })
    }

    if (error) {
      console.error('❌ History fetch error (likely RLS blocking access):', error)
      console.log('🔍 Error details:', {
        message: error.message,
        code: error.code,
        details: error.details,
        hint: error.hint
      })
      
      // RLS fallback: Try using public debug API when direct DB access fails
      console.log('🔄 Attempting fallback via public debug API...')
      try {
        const fallbackResponse = await fetch(`/api/public-debug?customer_id=${customerId}`)
        const fallbackData = await fallbackResponse.json()
        
        console.log('📊 Fallback API response:', fallbackData)
        
        if (fallbackData.success && fallbackData.data?.generations) {
          console.log('✅ Using fallback data from public API')
          setHistory(fallbackData.data.generations)
        } else {
          console.log('⚠️ Fallback API also returned no data')
          setHistory([])
        }
      } catch (fallbackError) {
        console.error('❌ Fallback API also failed:', fallbackError)
        setHistory([])
      }
    } else if (!error && data) {
      console.log('✅ Setting history data from direct Supabase query:', data)
      setHistory(data)
    } else {
      console.log('⚠️ No data returned from direct query, trying fallback...')
      
      // Try fallback API even when no error but no data
      try {
        const fallbackResponse = await fetch(`/api/public-debug?customer_id=${customerId}`)
        const fallbackData = await fallbackResponse.json()
        
        console.log('📊 Fallback API response (no data case):', fallbackData)
        
        if (fallbackData.success && fallbackData.data?.generations) {
          console.log('✅ Using fallback data (no data case)')
          setHistory(fallbackData.data.generations)
        } else {
          setHistory([])
        }
      } catch (fallbackError) {
        console.error('❌ Fallback API failed (no data case):', fallbackError)
        setHistory([])
      }
    }
    
    setLoading(false)
  }

  const downloadImage = async (url: string, filename: string) => {
    try {
      const response = await fetch(url)
      const blob = await response.blob()
      const downloadUrl = window.URL.createObjectURL(blob)
      const link = document.createElement('a')
      link.href = downloadUrl
      link.download = filename
      document.body.appendChild(link)
      link.click()
      document.body.removeChild(link)
      window.URL.revokeObjectURL(downloadUrl)
    } catch (error) {
      console.error('Download failed:', error)
    }
  }

  // 🔥 NEW: Enhanced setSelectedItem with detailed logging
  const handleSetSelectedItem = (item: GenerationHistoryItem) => {
    console.log('🎯 SETTING SELECTED ITEM - Full Debug:')
    console.log('  itemId:', item.id)
    console.log('  hasPrompt:', !!item.prompt)
    console.log('  promptLength:', item.prompt?.length || 0)
    console.log('  promptContent:', item.prompt || 'NO PROMPT DATA')
    console.log('  itemKeys:', Object.keys(item))
    console.log('  fullSelectedItem:', item)
    setSelectedItem(item)
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center py-12">
        <Loader2 className="h-8 w-8 animate-spin" />
      </div>
    )
  }

  if (history.length === 0) {
    return (
      <Card>
        <CardContent className="flex flex-col items-center justify-center py-12">
          <Palette className="h-12 w-12 text-muted-foreground mb-4" />
          <p className="text-muted-foreground text-center">
            まだ生成履歴がありません
          </p>
          <p className="text-sm text-muted-foreground text-center mt-2">
            シミュレーション作成タブから画像を生成してください
          </p>
        </CardContent>
      </Card>
    )
  }

  return (
    <div className="space-y-4">
      <Card>
        <CardHeader>
          <CardTitle>生成履歴</CardTitle>
          <CardDescription>
            過去に生成したシミュレーション画像
          </CardDescription>
        </CardHeader>
        <CardContent>
          <ScrollArea className="h-[600px] pr-4">
            <div className="space-y-4">
              {history.map((item) => (
                <Card key={item.id} className="overflow-hidden">
                  <CardContent className="p-4">
                    <div className="flex items-start space-x-4">
                      {/* Thumbnail */}
                      <div className="relative w-32 h-32 flex-shrink-0 bg-muted rounded-lg overflow-hidden">
                        {item.gemini_response?.imageUrl ? (
                          <Image
                            src={item.gemini_response.imageUrl}
                            alt="生成画像"
                            fill
                            className="object-cover"
                          />
                        ) : item.status === 'processing' ? (
                          <div className="flex items-center justify-center h-full">
                            <Loader2 className="h-6 w-6 animate-spin" />
                          </div>
                        ) : (
                          <div className="flex items-center justify-center h-full">
                            <span className="text-sm text-muted-foreground">
                              画像なし
                            </span>
                          </div>
                        )}
                      </div>

                      {/* Details */}
                      <div className="flex-1 space-y-2">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center space-x-2">
                            <Calendar className="h-4 w-4 text-muted-foreground" />
                            <span className="text-sm text-muted-foreground">
                              {new Date(item.created_at).toLocaleDateString('ja-JP', {
                                year: 'numeric',
                                month: 'long',
                                day: 'numeric',
                                hour: '2-digit',
                                minute: '2-digit'
                              })}
                            </span>
                          </div>
                          <Badge
                            variant={
                              item.status === 'completed' ? 'default' :
                              item.status === 'processing' ? 'secondary' :
                              'destructive'
                            }
                          >
                            {item.status === 'completed' ? '完了' :
                             item.status === 'processing' ? '処理中' :
                             '失敗'}
                          </Badge>
                        </div>

                        <div className="text-sm space-y-1">
                          {item.wall_color && item.wall_color !== '変更なし' && (
                            <p>壁: {item.wall_color}</p>
                          )}
                          {item.roof_color && item.roof_color !== '変更なし' && (
                            <p>屋根: {item.roof_color}</p>
                          )}
                          {item.door_color && item.door_color !== '変更なし' && (
                            <p>ドア: {item.door_color}</p>
                          )}
                          {item.weather && (
                            <p>天候: {item.weather}</p>
                          )}
                        </div>

                        {item.error_message && (
                          <p className="text-sm text-destructive">
                            エラー: {item.error_message}
                          </p>
                        )}

                        {item.status === 'completed' && item.gemini_response?.imageUrl && (
                          <div className="flex space-x-2 pt-2">
                            <Button
                              size="sm"
                              variant="outline"
                              onClick={() => handleSetSelectedItem(item)}
                            >
                              <Eye className="h-4 w-4 mr-1" />
                              詳細
                            </Button>
                            <Button
                              size="sm"
                              variant="outline"
                              onClick={() => downloadImage(
                                item.gemini_response?.imageUrl || '',
                                `paintly_${item.id}.png`
                              )}
                            >
                              <Download className="h-4 w-4 mr-1" />
                              ダウンロード
                            </Button>
                          </div>
                        )}
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </ScrollArea>
        </CardContent>
      </Card>

      {/* Detail Modal - To be implemented with a proper modal component */}
      {selectedItem && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
          <Card className="max-w-4xl w-full max-h-[90vh] overflow-auto">
            <CardHeader>
              <CardTitle>生成画像詳細</CardTitle>
              <Button
                className="absolute top-4 right-4"
                variant="ghost"
                size="sm"
                onClick={() => setSelectedItem(null)}
              >
                ✕
              </Button>
            </CardHeader>
            <CardContent className="space-y-4">
              {(() => {
                // 有効な画像URLを取得（placeholder文字列を除外）
                const validOriginalUrl = selectedItem.original_image_url &&
                  selectedItem.original_image_url !== 'placeholder' &&
                  selectedItem.original_image_url.startsWith('http') ?
                  selectedItem.original_image_url :
                  selectedItem.gemini_response?.originalImageUrl;

                const validGeneratedUrl = selectedItem.generated_image_url ||
                  selectedItem.gemini_response?.imageUrl;

                console.log('🔍 ImageComparison Debug - Raw URLs:');
                console.log('  📁 rawOriginalUrl:', selectedItem.original_image_url);
                console.log('  📁 rawGeneratedUrl:', selectedItem.generated_image_url);
                console.log('  🤖 geminiImageUrl:', selectedItem.gemini_response?.imageUrl);
                console.log('  🤖 geminiOriginalUrl:', selectedItem.gemini_response?.originalImageUrl);
                console.log('🎯 Final Valid URLs:');
                console.log('  ✅ validOriginalUrl:', validOriginalUrl);
                console.log('  ✅ validGeneratedUrl:', validGeneratedUrl);
                console.log('  🎮 willShowComparison:', !!(validGeneratedUrl && validOriginalUrl));
                return null;
              })()}
              {(() => {
                // デバッグ部分で定義した値を再利用
                const validOriginalUrl = selectedItem.original_image_url &&
                  selectedItem.original_image_url !== 'placeholder' &&
                  selectedItem.original_image_url.startsWith('http') ?
                  selectedItem.original_image_url :
                  selectedItem.gemini_response?.originalImageUrl;

                const validGeneratedUrl = selectedItem.generated_image_url ||
                  selectedItem.gemini_response?.imageUrl;

                if (validGeneratedUrl && validOriginalUrl) {
                  return (
                    <ImageComparisonFixed
                      originalImage={validOriginalUrl}
                      generatedImage={validGeneratedUrl}
                      title="ビフォーアフター比較"
                      allowDownload={true}
                    />
                  );
                } else if (validGeneratedUrl) {
                  return (
                    <div className="relative aspect-video w-full overflow-hidden rounded-lg bg-muted">
                      <Image
                        src={validGeneratedUrl}
                        alt="生成画像"
                        fill
                        className="object-contain"
                      />
                    </div>
                  );
                } else {
                  return (
                    <div className="text-center p-8 text-muted-foreground">
                      <p>画像の読み込みに問題があります</p>
                    </div>
                  );
                }
              })()}
              <div className="space-y-2">
                <p className="text-sm">
                  <strong>生成日時:</strong> {new Date(selectedItem.created_at).toLocaleString('ja-JP')}
                </p>
                <p className="text-sm">
                  <strong>ステータス:</strong> {selectedItem.status === 'completed' ? '完了' : selectedItem.status}
                </p>
                <div className="text-sm">
                  <strong>設定内容:</strong>
                  <div className="mt-2 p-2 bg-muted rounded text-xs space-y-1">
                    {selectedItem.wall_color && selectedItem.wall_color !== '変更なし' && (
                      <div>壁の色: {selectedItem.wall_color}</div>
                    )}
                    {selectedItem.roof_color && selectedItem.roof_color !== '変更なし' && (
                      <div>屋根の色: {selectedItem.roof_color}</div>
                    )}
                    {selectedItem.door_color && selectedItem.door_color !== '変更なし' && (
                      <div>ドアの色: {selectedItem.door_color}</div>
                    )}
                    {selectedItem.weather && (
                      <div>天候: {selectedItem.weather}</div>
                    )}
                  </div>
                </div>

                {/* Enhanced Debug: Show generated prompt with forced logging */}
                {(() => {
                  console.log('🎯 FINAL Prompt Debug (in Modal):', {
                    hasPrompt: !!selectedItem.prompt,
                    promptLength: selectedItem.prompt?.length || 0,
                    promptPreview: selectedItem.prompt?.substring(0, 100) || 'No prompt',
                    fullSelectedItem: selectedItem,
                    itemKeys: Object.keys(selectedItem),
                    promptValue: selectedItem.prompt
                  });
                  return null;
                })()}
                {selectedItem.prompt ? (
                  <div className="text-sm">
                    <strong>🔍 デバッグ用プロンプト:</strong>
                    <div className="mt-2 p-3 bg-slate-100 border rounded text-xs font-mono max-h-40 overflow-y-auto">
                      <pre className="whitespace-pre-wrap break-words">
                        {selectedItem.prompt}
                      </pre>
                    </div>
                    <p className="text-xs text-muted-foreground mt-1">
                      ※ デバッグ用：AI生成に使用された実際のプロンプト内容
                    </p>
                  </div>
                ) : (
                  <div className="text-sm">
                    <strong>⚠️ プロンプト情報なし:</strong>
                    <p className="text-xs text-muted-foreground mt-1">
                      このレコードにはプロンプトデータが保存されていません
                    </p>
                    <div className="mt-2 p-2 bg-red-50 border border-red-200 rounded text-xs">
                      <strong>デバッグ情報:</strong>
                      <ul className="mt-1 space-y-1">
                        <li>• selectedItem.prompt: {String(selectedItem.prompt)}</li>
                        <li>• typeof prompt: {typeof selectedItem.prompt}</li>
                        <li>• Object keys: {Object.keys(selectedItem).join(', ')}</li>
                      </ul>
                    </div>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  )
}