'use client'

import { useState, useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Textarea } from '@/components/ui/textarea'
import { Checkbox } from '@/components/ui/checkbox'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog'
import {
  AlertTriangle,
  CheckCircle,
  Clock,
  TrendingUp,
  RefreshCcw,
  CheckSquare,
  Square,
  FileText,
  Users,
  Calendar,
  Target,
  Award,
  Zap,
  BarChart3
} from 'lucide-react'

interface ErrorResolutionStats {
  totalErrors: number
  resolvedErrors: number
  unresolvedErrors: number
  resolutionRate: number
  averageResolutionTime: number
  recentResolutions: Array<{
    errorId: string
    message: string
    resolvedAt: string
    resolvedBy: string
    resolutionTime: number
  }>
  pendingResolution: Array<{
    errorId: string
    message: string
    firstOccurred: string
    lastOccurred: string
    occurrenceCount: number
    priority: 'low' | 'medium' | 'high' | 'critical'
  }>
  resolutionTrends: Array<{
    date: string
    resolved: number
    newErrors: number
  }>
}

interface ResolutionNote {
  timestamp: string
  resolvedBy: string
  notes: string
}

// Client-side error reporting function
const reportClientError = (error: Error, context: string) => {
  if (typeof window !== 'undefined') {
    try {
      fetch('/api/error-reporting', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message: error.message,
          stack: error.stack,
          context: context,
          url: window.location.href,
          userAgent: navigator.userAgent,
          timestamp: new Date().toISOString(),
          component: 'ErrorResolutionDashboard'
        })
      }).catch(console.error)
    } catch (reportError) {
      console.error('Failed to report error:', reportError)
    }
  }
}

export function ErrorResolutionDashboard() {
  const [stats, setStats] = useState<ErrorResolutionStats | null>(null)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [selectedErrors, setSelectedErrors] = useState<string[]>([])
  const [resolutionNotes, setResolutionNotes] = useState('')
  const [showResolutionDialog, setShowResolutionDialog] = useState(false)
  const [showNotesDialog, setShowNotesDialog] = useState(false)
  const [currentErrorNotes, setCurrentErrorNotes] = useState<ResolutionNote[]>([])
  const [currentErrorId, setCurrentErrorId] = useState<string | null>(null)
  const [period, setPeriod] = useState<number>(7)

  // Ëß£Ê±∫Áµ±Ë®à„ÅÆË™≠„ÅøËæº„Åø
  const loadResolutionStats = async () => {
    try {
      setLoading(true)
      setError(null)
      console.log('üîÑ Loading error resolution statistics')

      const response = await fetch(`/api/error-resolution?action=get_stats&days=${period}`, {
        headers: {
          'Authorization': 'Bearer admin-token' // Á∞°ÊòìË™çË®º
        }
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || `HTTP ${response.status}`)
      }

      const data = await response.json()
      setStats(data.stats)
      console.log('‚úÖ Error resolution statistics loaded:', data.stats)

    } catch (error) {
      const loadError = error instanceof Error ? error : new Error('Unknown error loading resolution stats')
      console.error('‚ùå Error loading resolution statistics:', loadError)
      reportClientError(loadError, `Resolution stats loading - Period: ${period}`)
      setError(loadError.message)
    } finally {
      setLoading(false)
    }
  }

  // „Ç®„É©„ÉºËß£Ê±∫„ÅÆÂÆüË°å
  const resolveSelectedErrors = async () => {
    if (selectedErrors.length === 0) {
      alert('Ëß£Ê±∫„Åô„Çã„Ç®„É©„Éº„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ')
      return
    }

    try {
      console.log('‚úÖ Resolving selected errors:', selectedErrors)

      const response = await fetch('/api/error-resolution', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer admin-token'
        },
        body: JSON.stringify({
          action: 'resolve',
          errorIds: selectedErrors,
          resolutionNotes,
          resolvedBy: 'Admin' // ÂÆüË£ÖÊôÇ„ÅØÂÆüÈöõ„ÅÆ„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„Çí‰ΩøÁî®
        })
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || `HTTP ${response.status}`)
      }

      const data = await response.json()
      console.log('‚úÖ Errors resolved:', data)

      // Áä∂ÊÖã„Çí„É™„Çª„ÉÉ„Éà
      setSelectedErrors([])
      setResolutionNotes('')
      setShowResolutionDialog(false)

      // Áµ±Ë®à„ÇíÂÜçË™≠„ÅøËæº„Åø
      await loadResolutionStats()

      alert(`${data.resolvedErrors.length}‰ª∂„ÅÆ„Ç®„É©„Éº„ÅåËß£Ê±∫Ê∏à„Åø„Å´„Éû„Éº„ÇØ„Åï„Çå„Åæ„Åó„Åü`)

    } catch (error) {
      const resolveError = error instanceof Error ? error : new Error('Unknown error resolving errors')
      console.error('‚ùå Error resolving errors:', resolveError)
      reportClientError(resolveError, `Error resolution - ErrorIDs: ${selectedErrors.join(',')}`)
      alert(`„Ç®„É©„Éº„ÅÆËß£Ê±∫Âá¶ÁêÜ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${resolveError.message}`)
    }
  }

  // Ëá™ÂãïËß£Ê±∫„ÅÆÂÆüË°å
  const performAutoResolution = async () => {
    if (!confirm('Ëá™ÂãïËß£Ê±∫Âá¶ÁêÜ„ÇíÂÆüË°å„Åó„Åæ„Åô„ÅãÔºü‰∏ÄÂÆöÊúüÈñìÁô∫Áîü„Åó„Å¶„ÅÑ„Å™„ÅÑ„Ç®„É©„Éº„ÅåËá™ÂãïÁöÑ„Å´Ëß£Ê±∫Ê∏à„Åø„Å´„Éû„Éº„ÇØ„Åï„Çå„Åæ„Åô„ÄÇ')) {
      return
    }

    try {
      console.log('ü§ñ Performing auto resolution')

      const response = await fetch(`/api/error-resolution?action=auto_resolve&days=${period}`, {
        headers: {
          'Authorization': 'Bearer admin-token'
        }
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || `HTTP ${response.status}`)
      }

      const data = await response.json()
      console.log('‚úÖ Auto resolution completed:', data)

      await loadResolutionStats()

      alert(`Ëá™ÂãïËß£Ê±∫Âá¶ÁêÜ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇ${data.resolvedCount}‰ª∂„ÅÆ„Ç®„É©„Éº„ÅåËá™ÂãïËß£Ê±∫„Åï„Çå„Åæ„Åó„Åü„ÄÇ`)

    } catch (error) {
      const autoError = error instanceof Error ? error : new Error('Unknown error in auto resolution')
      console.error('‚ùå Error in auto resolution:', autoError)
      reportClientError(autoError, 'Auto resolution execution')
      alert(`Ëá™ÂãïËß£Ê±∫Âá¶ÁêÜ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${autoError.message}`)
    }
  }

  // Ëß£Ê±∫„Éé„Éº„Éà„ÅÆÂèñÂæó
  const loadResolutionNotes = async (errorId: string) => {
    try {
      console.log('üìù Loading resolution notes for:', errorId)

      const response = await fetch(`/api/error-resolution?action=get_resolution_notes&errorId=${errorId}`, {
        headers: {
          'Authorization': 'Bearer admin-token'
        }
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || `HTTP ${response.status}`)
      }

      const data = await response.json()
      setCurrentErrorNotes(data.notes)
      setCurrentErrorId(errorId)
      setShowNotesDialog(true)

    } catch (error) {
      const notesError = error instanceof Error ? error : new Error('Unknown error loading notes')
      console.error('‚ùå Error loading resolution notes:', notesError)
      reportClientError(notesError, `Resolution notes loading - ErrorID: ${errorId}`)
      alert(`Ëß£Ê±∫„Éé„Éº„Éà„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${notesError.message}`)
    }
  }

  // „Ç®„É©„ÉºÈÅ∏Êäû„ÅÆÂàá„ÇäÊõø„Åà
  const toggleErrorSelection = (errorId: string) => {
    setSelectedErrors(prev =>
      prev.includes(errorId)
        ? prev.filter(id => id !== errorId)
        : [...prev, errorId]
    )
  }

  // ÂÖ®ÈÅ∏Êäû/ÂÖ®Ëß£Èô§
  const toggleSelectAll = () => {
    if (!stats) return

    if (selectedErrors.length === stats.pendingResolution.length) {
      setSelectedErrors([])
    } else {
      setSelectedErrors(stats.pendingResolution.map(error => error.errorId))
    }
  }

  // ÂàùÊúüË™≠„ÅøËæº„Åø
  useEffect(() => {
    loadResolutionStats()
  }, [period])

  // ÂÑ™ÂÖàÂ∫¶„ÅÆ„Ç´„É©„ÉºÂèñÂæó
  const getPriorityColor = (priority: string): string => {
    const colors: Record<string, string> = {
      'critical': 'destructive',
      'high': 'destructive',
      'medium': 'secondary',
      'low': 'outline'
    }
    return colors[priority] || 'secondary'
  }

  // ÊôÇÈñì„ÅÆ„Éï„Ç©„Éº„Éû„ÉÉ„Éà
  const formatTime = (hours: number): string => {
    if (hours < 1) return `${Math.round(hours * 60)}ÂàÜ`
    if (hours < 24) return `${Math.round(hours)}ÊôÇÈñì`
    return `${Math.round(hours / 24)}Êó•`
  }

  // Êó•‰ªò„ÅÆ„Éï„Ç©„Éº„Éû„ÉÉ„Éà
  const formatDate = (dateString: string): string => {
    return new Date(dateString).toLocaleDateString('ja-JP', {
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })
  }

  return (
    <div className="space-y-6" role="main" aria-labelledby="resolution-dashboard-title">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 id="resolution-dashboard-title" className="text-3xl font-bold tracking-tight">
            „Ç®„É©„ÉºËß£Ê±∫ËøΩË∑°„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ
          </h1>
          <p className="text-muted-foreground">
            „Ç®„É©„Éº„ÅÆËß£Ê±∫Áä∂Ê≥ÅÁÆ°ÁêÜ„Å®Áµ±Ë®àÂàÜÊûê
          </p>
        </div>

        <div className="flex items-center space-x-2">
          <div className="flex items-center space-x-2">
            <span className="text-sm font-medium">ÊúüÈñì:</span>
            <div className="flex" role="group" aria-label="ÊúüÈñìÈÅ∏Êäû">
              {[7, 14, 30].map((days) => (
                <Button
                  key={days}
                  variant={period === days ? 'default' : 'outline'}
                  size="sm"
                  onClick={() => setPeriod(days)}
                  className={`rounded-none first:rounded-l-md last:rounded-r-md`}
                  aria-pressed={period === days}
                >
                  {days}Êó•Èñì
                </Button>
              ))}
            </div>
          </div>

          <Button
            variant="outline"
            size="sm"
            onClick={performAutoResolution}
            disabled={loading}
            aria-label="Ëá™ÂãïËß£Ê±∫„ÇíÂÆüË°å"
          >
            <Zap className="w-4 h-4 mr-2" />
            Ëá™ÂãïËß£Ê±∫
          </Button>

          <Button
            variant="outline"
            size="sm"
            onClick={loadResolutionStats}
            disabled={loading}
            aria-label="„Éá„Éº„Çø„ÇíÂÜçË™≠„ÅøËæº„Åø"
          >
            <RefreshCcw className={`w-4 h-4 mr-2 ${loading ? 'animate-spin' : ''}`} />
            ÂÜçË™≠„ÅøËæº„Åø
          </Button>
        </div>
      </div>

      {/* Error Alert */}
      {error && (
        <Alert variant="destructive">
          <AlertTriangle className="h-4 w-4" />
          <AlertDescription>
            „Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: {error}
          </AlertDescription>
        </Alert>
      )}

      {/* Loading State */}
      {loading && (
        <div className="flex items-center justify-center py-8">
          <div className="flex items-center space-x-2">
            <RefreshCcw className="w-5 h-5 animate-spin" />
            <span>„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø‰∏≠...</span>
          </div>
        </div>
      )}

      {/* Stats Overview */}
      {stats && !loading && (
        <>
          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Ëß£Ê±∫Áéá</CardTitle>
                <Target className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">
                  {Math.round(stats.resolutionRate * 100)}%
                </div>
                <p className="text-xs text-muted-foreground">
                  {stats.resolvedErrors} / {stats.totalErrors} ‰ª∂
                </p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Âπ≥ÂùáËß£Ê±∫ÊôÇÈñì</CardTitle>
                <Clock className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">
                  {formatTime(stats.averageResolutionTime)}
                </div>
                <p className="text-xs text-muted-foreground">
                  Âπ≥ÂùáËß£Ê±∫„Åæ„Åß„ÅÆÊôÇÈñì
                </p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Êú™Ëß£Ê±∫„Ç®„É©„Éº</CardTitle>
                <AlertTriangle className="h-4 w-4 text-red-500" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold text-red-600">
                  {stats.unresolvedErrors}
                </div>
                <p className="text-xs text-muted-foreground">
                  ÂØæÂøú„ÅåÂøÖË¶Å„Å™„Ç®„É©„Éº
                </p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Ëß£Ê±∫Ê∏à„Åø</CardTitle>
                <CheckCircle className="h-4 w-4 text-green-500" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold text-green-600">
                  {stats.resolvedErrors}
                </div>
                <p className="text-xs text-muted-foreground">
                  Ëß£Ê±∫ÂÆå‰∫Ü„Åó„Åü„Ç®„É©„Éº
                </p>
              </CardContent>
            </Card>
          </div>

          <Tabs defaultValue="pending" className="space-y-4">
            <TabsList>
              <TabsTrigger value="pending">Êú™Ëß£Ê±∫„Ç®„É©„Éº ({stats.unresolvedErrors})</TabsTrigger>
              <TabsTrigger value="resolved">ÊúÄËøë„ÅÆËß£Ê±∫ ({stats.recentResolutions.length})</TabsTrigger>
              <TabsTrigger value="trends">Ëß£Ê±∫„Éà„É¨„É≥„Éâ</TabsTrigger>
            </TabsList>

            <TabsContent value="pending" className="space-y-4">
              {stats.pendingResolution.length === 0 ? (
                <Card>
                  <CardContent className="flex items-center justify-center py-8">
                    <div className="text-center">
                      <Award className="w-12 h-12 text-green-500 mx-auto mb-4" />
                      <h3 className="text-lg font-semibold mb-2">Êú™Ëß£Ê±∫„Ç®„É©„Éº„Å™„Åó</h3>
                      <p className="text-muted-foreground">
                        „Åô„Åπ„Å¶„ÅÆ„Ç®„É©„Éº„ÅåËß£Ê±∫Ê∏à„Åø„Åß„ÅôÔºÅÁ¥†Êô¥„Çâ„Åó„ÅÑÁä∂Ê≥Å„Åß„Åô„ÄÇ
                      </p>
                    </div>
                  </CardContent>
                </Card>
              ) : (
                <>
                  {/* Bulk Actions */}
                  <Card>
                    <CardHeader>
                      <div className="flex items-center justify-between">
                        <CardTitle>‰∏ÄÊã¨Êìç‰Ωú</CardTitle>
                        <div className="flex items-center space-x-2">
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={toggleSelectAll}
                            aria-label={selectedErrors.length === stats.pendingResolution.length ? 'ÂÖ®ÈÅ∏Êäû„ÇíËß£Èô§' : 'ÂÖ®ÈÅ∏Êäû'}
                          >
                            {selectedErrors.length === stats.pendingResolution.length ? (
                              <CheckSquare className="w-4 h-4 mr-2" />
                            ) : (
                              <Square className="w-4 h-4 mr-2" />
                            )}
                            ÂÖ®ÈÅ∏Êäû
                          </Button>

                          <Dialog open={showResolutionDialog} onOpenChange={setShowResolutionDialog}>
                            <DialogTrigger asChild>
                              <Button
                                size="sm"
                                disabled={selectedErrors.length === 0}
                                aria-label={`ÈÅ∏Êäû„Åó„Åü${selectedErrors.length}‰ª∂„ÅÆ„Ç®„É©„Éº„ÇíËß£Ê±∫`}
                              >
                                <CheckCircle className="w-4 h-4 mr-2" />
                                Ëß£Ê±∫ ({selectedErrors.length})
                              </Button>
                            </DialogTrigger>
                            <DialogContent>
                              <DialogHeader>
                                <DialogTitle>„Ç®„É©„ÉºËß£Ê±∫„ÅÆÁ¢∫Ë™ç</DialogTitle>
                                <DialogDescription>
                                  {selectedErrors.length}‰ª∂„ÅÆ„Ç®„É©„Éº„ÇíËß£Ê±∫Ê∏à„Åø„Å´„Éû„Éº„ÇØ„Åó„Åæ„Åô„ÄÇ
                                </DialogDescription>
                              </DialogHeader>
                              <div className="space-y-4">
                                <div>
                                  <label className="text-sm font-medium">Ëß£Ê±∫„Éé„Éº„ÉàÔºà‰ªªÊÑèÔºâ</label>
                                  <Textarea
                                    value={resolutionNotes}
                                    onChange={(e) => setResolutionNotes(e.target.value)}
                                    placeholder="Ëß£Ê±∫ÊñπÊ≥ï„ÇÑÂéüÂõ†„Å´„Å§„ÅÑ„Å¶Ë®òÈå≤„Åó„Å¶„Åè„Å†„Åï„ÅÑ..."
                                    className="mt-1"
                                    rows={4}
                                  />
                                </div>
                                <div className="flex justify-end space-x-2">
                                  <Button
                                    variant="outline"
                                    onClick={() => setShowResolutionDialog(false)}
                                  >
                                    „Ç≠„É£„É≥„Çª„É´
                                  </Button>
                                  <Button onClick={resolveSelectedErrors}>
                                    Ëß£Ê±∫Ê∏à„Åø„Å´„Éû„Éº„ÇØ
                                  </Button>
                                </div>
                              </div>
                            </DialogContent>
                          </Dialog>
                        </div>
                      </div>
                    </CardHeader>
                  </Card>

                  {/* Pending Errors List */}
                  <div className="space-y-3">
                    {stats.pendingResolution.map((error) => (
                      <Card key={error.errorId}>
                        <CardContent className="p-4">
                          <div className="flex items-start justify-between">
                            <div className="flex items-start space-x-3 flex-1">
                              <Checkbox
                                checked={selectedErrors.includes(error.errorId)}
                                onCheckedChange={() => toggleErrorSelection(error.errorId)}
                                aria-label={`„Ç®„É©„Éº ${error.errorId} „ÇíÈÅ∏Êäû`}
                              />
                              <div className="flex-1 min-w-0">
                                <div className="flex items-center space-x-2 mb-2">
                                  <Badge variant={getPriorityColor(error.priority) as any}>
                                    {error.priority}
                                  </Badge>
                                  <span className="text-sm text-muted-foreground">
                                    {error.occurrenceCount}ÂõûÁô∫Áîü
                                  </span>
                                  <span className="text-sm text-muted-foreground">
                                    ID: {error.errorId}
                                  </span>
                                </div>
                                <p className="font-medium text-sm mb-2">{error.message}</p>
                                <div className="flex items-center space-x-4 text-xs text-muted-foreground">
                                  <span className="flex items-center">
                                    <Calendar className="w-3 h-3 mr-1" />
                                    ÂàùÂõû: {formatDate(error.firstOccurred)}
                                  </span>
                                  <span className="flex items-center">
                                    <Clock className="w-3 h-3 mr-1" />
                                    ÊúÄÁµÇ: {formatDate(error.lastOccurred)}
                                  </span>
                                </div>
                              </div>
                            </div>
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => loadResolutionNotes(error.errorId)}
                              aria-label="Ëß£Ê±∫„Éé„Éº„Éà„ÇíË°®Á§∫"
                            >
                              <FileText className="w-4 h-4" />
                            </Button>
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                </>
              )}
            </TabsContent>

            <TabsContent value="resolved" className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle>ÊúÄËøëËß£Ê±∫„Åï„Çå„Åü„Ç®„É©„Éº</CardTitle>
                </CardHeader>
                <CardContent>
                  {stats.recentResolutions.length === 0 ? (
                    <p className="text-muted-foreground text-center py-4">
                      ÊúÄËøëËß£Ê±∫„Åï„Çå„Åü„Ç®„É©„Éº„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì
                    </p>
                  ) : (
                    <div className="space-y-3">
                      {stats.recentResolutions.map((resolution, index) => (
                        <div key={index} className="flex items-center justify-between p-3 border rounded">
                          <div className="flex-1 min-w-0">
                            <p className="font-medium text-sm truncate">{resolution.message}</p>
                            <div className="flex items-center space-x-4 text-xs text-muted-foreground mt-1">
                              <span className="flex items-center">
                                <Users className="w-3 h-3 mr-1" />
                                {resolution.resolvedBy}
                              </span>
                              <span className="flex items-center">
                                <Clock className="w-3 h-3 mr-1" />
                                Ëß£Ê±∫ÊôÇÈñì: {Math.round(resolution.resolutionTime)}ÂàÜ
                              </span>
                              <span>{formatDate(resolution.resolvedAt)}</span>
                            </div>
                          </div>
                          <Badge variant="secondary">Ëß£Ê±∫Ê∏à„Åø</Badge>
                        </div>
                      ))}
                    </div>
                  )}
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="trends" className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <BarChart3 className="w-5 h-5 mr-2" />
                    Ëß£Ê±∫„Éà„É¨„É≥„ÉâÂàÜÊûê
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-muted-foreground">
                    Ëß£Ê±∫„Éà„É¨„É≥„Éâ„ÅÆË©≥Á¥∞ÂàÜÊûêÊ©üËÉΩ„ÅØ‰ªäÂæåÂÆüË£Ö‰∫àÂÆö„Åß„Åô„ÄÇ
                  </p>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>

          {/* Resolution Notes Dialog */}
          <Dialog open={showNotesDialog} onOpenChange={setShowNotesDialog}>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>Ëß£Ê±∫„Éé„Éº„Éà</DialogTitle>
                <DialogDescription>
                  „Ç®„É©„Éº ID: {currentErrorId}
                </DialogDescription>
              </DialogHeader>
              <div className="space-y-4">
                {currentErrorNotes.length === 0 ? (
                  <p className="text-muted-foreground text-center py-4">
                    Ëß£Ê±∫„Éé„Éº„Éà„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì
                  </p>
                ) : (
                  <div className="space-y-3">
                    {currentErrorNotes.map((note, index) => (
                      <div key={index} className="p-3 border rounded">
                        <div className="flex items-center justify-between mb-2">
                          <span className="font-medium text-sm">{note.resolvedBy}</span>
                          <span className="text-xs text-muted-foreground">
                            {formatDate(note.timestamp)}
                          </span>
                        </div>
                        <p className="text-sm">{note.notes}</p>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </DialogContent>
          </Dialog>
        </>
      )}
    </div>
  )
}